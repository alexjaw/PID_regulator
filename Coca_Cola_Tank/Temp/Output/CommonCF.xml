<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonCF</name>
    </assembly>
    <members>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedBase.CreatePropertyChangedHelper">
            <summary>
            Creates a <see cref="T:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase"/>.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedBase.NotifyPropertyChangedHelper">
            <summary>
            Gets the notify property changed helper.
            </summary>
        </member>
        <member name="E:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedBase.IsAnyListening">
            <summary>
            Gets a value indicating whether anyone is listening for property changes.
            </summary>
        </member>
        <member name="E:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedBase.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedCF.SetAndFirePropertyChanged``1(System.String,``0@,``0)">
            <summary>
            Sets the specified new value, and fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event if the new value is different from the old value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>true if value was changed; otherwise false.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedCF.SetAndFirePropertyChanged``1(System.String,``0@,``0,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Unhooks the event handler from the old value's <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event, assigns the new value to it, hooks up the PropertyChanged event on the new value, and
            finally fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="valueChangedEventHandler">
            Event handler to hook up to the value's <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </param>
            <returns>true if value was changed; otherwise false.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedCF.FirePropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event with specified
            property name.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedCF.CreatePropertyChangedHelper">
            <summary>
            Creates a <see cref="T:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase"/>.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Assertion.Assert">
            <summary>
            Class used when asserting arguments in methods and constructs. Removes a lot of the
            boilerplate code a developer otherwise have to write.
            </summary>
            <example>
            The following code sample displays usage. Code a developer normally has to write has been
            outcommented.
            </example>
            <code>
            public void SomeMethod(ISomeInterface someInterface, int someInt)
            {
              //if (someInterface == null)
              //  throw new ArgumentNullException("someInterface");
              //if (someInt &lt; 0)
              //  throw new ArgumentException("someInt must be positive");
               
              Assert.IsNotNull(someInterface);
              Assert.IsTrue(someInt &gt;= 0, "someInt must be positive");
            
              // Placeholder for method code
            }
            </code>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsNotNull``1(``0,System.String)">
            <summary>
            Assert that specified value isn't null.
            </summary>
            <param name="value">The value to check for not null.</param>
            <param name="message">The error message.</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">value is null.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsNotNull(System.Object[])">
            <summary>
            Assert that all the specified values are not null
            </summary>
            <param name="objects">The values that should be validated</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsNull(System.Object,System.String)">
            <summary>
            Assert that specified value is null.
            </summary>
            <param name="value">The value to check for null.</param>
            <param name="message">The error message.</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">value is not null.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            Assert that specified condition is true.
            </summary>
            <param name="condition">The condition to check for true.</param>
            <param name="message">The error message.</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">condition is false.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsFalse(System.Boolean,System.String)">
            <summary>
            Assert that specified condition is false.
            </summary>
            <param name="condition">The condition to check for false.</param>
            <param name="message">The error message.</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">condition is true.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Assert that specified value isn't null or an empty string.
            </summary>
            <param name="value">The value to check for not null or an empty string.</param>
            <param name="message">The error message.</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">value is null or an empty string.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.IsType``1(System.Object,System.String)">
            <summary>
            Assert that specified value is of specified type.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="value">The value to check for specified type.</param>
            <param name="message">The error message</param>
            <exception cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException">value is null or a whitespace string.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.CastNotNull``1(System.Object,System.String)">
            <summary>
            Assert that specified value can be cast to specified type.
            </summary>
            <typeparam name="T">The type to cast specified value to.</typeparam>
            <param name="value">The value to cast.</param>
            <param name="message">The error message.</param>
            <returns>The specified value to specified type.</returns>
            <exception cref="T:System.NullReferenceException">value is null.</exception>
            <exception cref="T:System.InvalidCastException">value is not of type T.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.Fail(System.String)">
            <summary>
            Fails the assertion without checking any conditions.
            </summary>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentNullException">message is null or empty.</exception>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.Assert.Throw(System.String)">
            <summary>
            Throws an <see cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException"/> with specified error message.
            </summary>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Assertion.AssertException">
            <summary>
            Exception thrown when values and conditions specified by <see cref="T:Neo.ApplicationFramework.Common.Assertion.Assert"/> is not met.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Assertion.AssertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.ApplicationFramework.Common.Assertion.AssertException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference if no inner
            exception is specified.
            </param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.BoolComparer.Compare(System.Boolean,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Compares the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Boundary.BoolComparer.Value">
            <summary>
            Gets the previous value.
            </summary>
            <value></value>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.IComparer`1.Compare(`0,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Test if a comparison is true.
            </summary>
            <param name="value">The value on the left hand side of the comparison.</param>
            <param name="type">The comparison type.</param>
            <returns>True if conditions are met.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.ComparerBase`1.Compare(`0,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Test if a comparison is true.
            </summary>
            <param name="value">The value on the left hand side of the comparison.</param>
            <param name="type">The comparison type.</param>
            <returns>True if conditions are met.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.DecimalComparer.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:DecimalComparer"/> class.
            </summary>
            <param name="value">The value to be used on the right hand side of the comparisons.</param>
            <param name="deadband">A possible deadband in 'equal to' comparisons.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.DecimalComparer.Compare(System.Decimal,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Test if a comparison is true.
            </summary>
            <param name="value">The value on the left hand side of the comparison.</param>
            <param name="type">The comparison type.</param>
            <returns>True if conditions are met.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.DoubleComparer.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:DoubleComparer"/> class.
            </summary>
            <param name="value">The value to be used on the right hand side of the comparisons.</param>
            <param name="deadband">A possible deadband in 'equal to' comparisons.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.DoubleComparer.Compare(System.Double,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Test if a comparison is true.
            </summary>
            <param name="value">The value on the left hand side of the comparison.</param>
            <param name="type">The comparison type.</param>
            <returns>True if conditions are met.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.IntComparer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IntComparer"/> class.
            </summary>
            <param name="value">The value to be used on the right hand side of the comparisons.</param>
            <param name="deadband">A possible deadband in 'equal to' comparisons.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Boundary.IntComparer.Compare(System.Int32,Neo.ApplicationFramework.Interfaces.ComparerTypes)">
            <summary>
            Test if a comparison is true.
            </summary>
            <param name="value">The value on the left hand side of the comparison.</param>
            <param name="type">The comparison type.</param>
            <returns>True if conditions are met.</returns>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Brand.BrandToolResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Collections.FilteredList`1">
            <summary>
            Class to be used when working with a subset of a full list
            The filter delegate is passed in the constructor
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.FilteredList`1.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Make sure a new PropertyDescriptorCollection is created and returned, we should not 
            modify the cached PropertyDescriptorCollection returned by TypeDescriptor.GetProperties.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.LfuCache`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="agePolicy">after this number of gets the cache will take 1 off all UseCounts, forcing old stuff to expire.</param>
            <param name="equalityComparer"></param>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Collections.NotifiableCollection`1">
            <summary>
            Listens for PropertyChanged among the children and propagates it when it happens.
            </summary>
            <typeparam name="T">Any type that implements INotifyPropertyChanged.</typeparam>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Collections.OwnedList`1">
            <summary>
            Class that implements a generic list that automatically adds and removes
            components to the container that the Owner resides in. Use it to implement a 
            designer collection property.
            </summary>
            <typeparam name="T">The type of items in the collection. Must implement IComponent.</typeparam>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.OwnedList`1.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the OwnedList class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.OwnedList`1.#ctor(System.ComponentModel.IComponent,System.Type)">
            <summary>
            Initializes a new instance of the OwnedList class.
            Used if the typed elements are of interface type
            </summary>
            <param name="owner"></param>
            <param name="typeToCreate"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.OwnedList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            Also removes the item from the owning container.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.OwnedList`1.ClearItems">
            <summary>
            Removes all items.
            Also removes the items from the owning container.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Collections.OwnedList`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts the specified item in the list at the specified index.
            Also adds the item to the owning container.
            </summary>
            <param name="index">The zero-based index where the item is to be inserted.</param>
            <param name="item">The item to insert in the list.</param>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Collections.OwnedList`1.Owner">
            <summary>
            The owner of the collection.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Collections.OwnedList`1.Container">
            <summary>
            Helper function that gets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Constants.SymbolConstants.SupportedImageFileExtensions">
            <summary>
            Returns an array of supported image file extensions without any leading dot. For example : {bmp, jpg}
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Constants.SymbolConstants.SupportedImagePatterns">
            <summary>
            Returns an array of supported image file patterns for searching and filtering. For example : {*.bmp, *.jpg}
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Constants.SymbolConstants.SupportedSymbolPatterns">
            <summary>
            Returns an array of supported symbol file patterns for searching and filtering. For example : {*.png, *.lib}
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
            <code>
            [LocalizationRequiredAttribute(true)]
            public class Foo
            {
              private string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class with
            <see cref="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required"/> set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <example>
            <code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args)
            {
              //Do something
            }
            public void Foo()
            {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one of the parameters
            of the caller function.
            For example, ReSharper annotates the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
            <code>
            public void Foo(string param)
            {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example>
             <code>
             public class Foo : INotifyPropertyChanged
             {
               public event PropertyChangedEventHandler PropertyChanged;
            
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName)
               {}
            
               private string _name;
               public string Name
               {
                 get { return _name; }
                 set
                 {
                   _name = value;
                   NotifyChanged("LastName"); // Warning
                 }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes, 
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
            <code>
            [CanBeNull]
            public object Test()
            {
              return null;
            }
            
            public void UseTest()
            {
              var p = Test(); 
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException' 
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example>
            <code>
            [NotNull]
            public object Foo()
            {
              return null; // Warning: Possible 'null' assignment
            } 
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted. <br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output means that the methos doesn't return normally. <br/>
            <c>canbenull</c> annotation is only applicable for output parameters. <br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute with rows separated by semicolon. <br/>
            </syntax>
            <examples>
            <list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // Regular Assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // String.IsNullOrEmpty
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c> should be used instead.
            However, using '==' or '!=' for comparison with <c>null</c> is always permitted.
            </summary>
            <example>
            <code>
            [CannotApplyEqualityOperator]
            class NoEquality
            {
            }
            
            class UsesNoEquality
            {
              public void Test()
              {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
            
                if (ca1 != null) // OK
                {
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked with 
            the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
             <summary>
             Indicates that a method does not make any observable state changes.
             </summary>
             <example>
             <code>
             [Pure]
             private int Multiply(int x, int y)
             {
               return x*y;
             }
            
             public void Foo()
             {
               const int a=2, b=2;
               Multiply(a, b); // Waring: Return value of pure method is not used
             }
             </code>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.FirePropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event with specified
            property name from <see cref="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.Owner"/>.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.FirePropertyChanged(System.Object,System.String)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event with specified
            property name from specified sender.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.FirePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event with specified
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> from <see cref="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.Owner"/>.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.FirePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event with specified
            <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> from specified sender.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.Owner">
            <summary>
            Gets the owner.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.IsAnyListening">
            <summary>
            Gets a value indicating whether anyone is listening for property changes.
            </summary>
        </member>
        <member name="E:Neo.ApplicationFramework.Common.Data.NotifyPropertyChangedHelperBase.PropertyChanged">
            <summary>
            Event sent when property changed.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Data.DataItemProxy.ConnectedClients">
            <summary>
            Handles the triggering of valuechanged based on the number of
            connected "clients".
            If not any connected clients, then don't fire ValueChanged.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.StructuredTagProxyFactory.CreateProxy(System.String)">
            <summary>
            This method creates a proxy to a structured tag, other than the path stored in the proxy no real use is provided at this point
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateProxy(System.String)">
            <summary>
            Used for creating proxies from generated code, see Neo.ApplicationFramework.Tools.OpcClient.DataItemProxyConverter./>
            </summary>
            <param name="name">Name of data item to create a proxy for.</param>
            <returns>The created proxy, or null if not possible.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.CreateRealtimeProxy(System.String)">
            <summary>
            Used for creating proxies from generated code, see Neo.ApplicationFramework.Tools.OpcClient.DataItemProxyConverter./>
            </summary>
            <param name="name">Name of data item to create a proxy for.</param>
            <returns>The created proxy, or null if not possible.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.GetProxy(System.String,Neo.ApplicationFramework.Interfaces.IScreen)">
            <summary>
            The purpose with this overloaded method is that it can be called from script, in order 
            to get a proxy that ends up in the recorded proxy list, even after EndRecordProxies have 
            been called, and thereby gets refreshed by the update timer in screen. The tag also gets 
            activated and later on deactivated when closing the screen, but it's not batch activated.
            </summary>
            <param name="name">Full name of tag to get proxy for.</param>
            <param name="screen">Reference to the screen to record this proxy for.</param>
            <returns>A dataitem proxy for the tag.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.DataItemProxyFactory.GetNonRefreshedProxy``1(System.String,System.String,System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            This method provides a way to get a DataItemProxy that does not connect(and hence refresh values)
            This is really a temporary workaround for case #13740. The base problem is that getting a proxy
            should never invoke a connect, and atleast should not provoke a refresh of values.
            Any connect or refresh of value should be explicit.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Security.SecurityGroup">
            <summary>
            Represents a specific security group.
            </summary>
            
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.OnListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Method to handle BindingList.ListChanged events from deriving classes
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.Equals(System.Object)">
            <summary>
            Comparison must be performed this way to make Proxied object appear the same
            as the Transparent Proxy object.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.GetHashCode">
            <summary>
            Must be overridden when overriding Equals() method.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.DesignerItemBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SecurityGroup"/> class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.#ctor(System.String,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Initializes a new instance of the <see cref="T:SecurityGroup"/> class.
            </summary>
            <param name="name">The name of the group.</param>
            <param name="group">The security groups enumeration to associate this group with.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.FlagGroup(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Flags a security group, by using bitwise 'or' on the enumeration and the group.
            </summary>
            <param name="groups">Security groups enumeration to manipulate.</param>
            <param name="groupToFlag">Group to flag in enumeration.</param>
            <returns>A security groups enumeration with the specified group flagged.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.UnflagGroup(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Unflags a security group, by using bitwise 'and' on the enumeration and the inverted group.
            </summary>
            <param name="groups">Security groups enumeration to manipulate.</param>
            <param name="groupToUnflag">Group to unflag in enumeration.</param>
            <returns>A security groups enumeration with the specified group unflagged.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.IsAnyGroupFlagged(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Checks if any group is flagged in another security groups enumeration.
            </summary>
            <param name="groups">Security groups enumeration to check among.</param>
            <param name="groupsToCheck">Groups to check if flagged.</param>
            <returns>True if any of the groups is flagged, false otherwise.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroup.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Security.SecurityGroup.GroupName">
            <summary>
            Gets or sets the name for this security group.
            </summary>
            <value></value>
            
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Security.SecurityGroup.Group">
            <summary>
            Gets or sets the security groups enumeration associated with this security group.
            </summary>
            <value></value>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Serialization.TextIdSerializationHelperCF">
            <summary>
            Contains help functionality to serialize / deserialize static Text Id to/from XAML
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.BindableDesignerItemBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Designer.BindableDesignerItemBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.BindableDesignerItemBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.ValueConnectionDesignerItemBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Designer.ValueConnectionDesignerItemBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Designer.ValueConnectionDesignerItemBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.BindableIntervalCF`1.UnhookPropertyChangedEvent">
            <summary>
            If the m_Value class T implements INotifyPropertyChanged, hook the PropertyChanged
            event handler.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.BindableIntervalCF`1.HookPropertyChangedEvent">
            <summary>
            If the m_Value class T implements INotifyPropertyChanged, unhook the PropertyChanged
            event handler.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.IntervalCF`1.UnhookPropertyChangedEvent">
            <summary>
            If the m_Value class T implements INotifyPropertyChanged, hook the PropertyChanged
            event handler.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.IntervalCF`1.HookPropertyChangedEvent">
            <summary>
            If the m_Value class T implements INotifyPropertyChanged, unhook the PropertyChanged
            event handler.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.BrushDynamicsConverterCF.#ctor">
            <summary>
            Initializes a new instance of the BrushConverterCF class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.BrushDynamicsConverterCF.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates
            a value from the binding source to the binding target.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">he converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.SymbolIntervalList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Make sure a new PropertyDescriptorCollection is created and returned, we should not 
            modify the cached PropertyDescriptorCollection returned by TypeDescriptor.GetProperties.
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangedEventHandlerExtensions">
            <summary>
            Class with <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> extensions.
            </summary>
        </member>
        <member name="M:System.ComponentModel.PropertyChangedEventHandlerExtensions.Fire(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires specified event argument on specified <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/>.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:System.EventHandlerExtensions.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Fires specified event argument on specified event handler.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:System.EventHandlerExtensions.Fire(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Fires specified event argument on specified event handler.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event argument.</param>
        </member>
        <member name="M:System.EventHandlerExtensions.FireWithBreaks(System.EventHandler,System.Object,System.EventArgs,System.Int32,System.Action)">
            <summary>
            Iterates over the delegates in the multicast event, and invokes them sequentially.
            After every <paramref name="breakAfterCount"/> the <paramref name="breakOperation"/>
            is invoked.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The event argument.</param>
            <param name="breakAfterCount">
            After specified number, breakOperation is invoked.
            </param>
            <param name="breakOperation">Action invoked.</param>
        </member>
        <member name="M:System.ICloneableExtensions.DeepClone(System.ICloneable)">
            <summary>
            Is a complement to the MemberwiseClone() method, where this will clone all reference
            types, held onto by fields, if they implement the ICloneable interface.
            </summary>
        </member>
        <member name="M:System.StringExtensions.CurrentCultureFormat(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a
            corresponding object in a specified array. The string is formatted using current
            culture.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the string
            representation of the corresponding objects in args.
            </returns>
        </member>
        <member name="M:System.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a
            corresponding object in a specified array. The string is formatted using invariant
            culture.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the string
            representation of the corresponding objects in args.
            </returns>
        </member>
        <member name="M:System.StringExtensions.AddPrefix(System.String,System.String,System.String)">
            <summary>
            Appends the given prefix argument to a name using the separator in the pattern of prefix + separator + name
            provided the param requirements are fulfilled. 
            </summary>
            <param name="name">The string with the extension method beeing called upon must be neither null nor empty</param>
            <param name="prefix">Any prefix, that is neither null nor empty, will be used according to the pattern prefix + separator + name</param>
            <param name="separator">The separator can be any string except null</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.XmlDiffPatch.XmlDiffOptions">
            <summary>
            Options for comparing XML documents. 
            </summary>
        </member>
        <member name="T:Microsoft.XmlDiffPatch.XmlDiffAlgorithm">
            <summary>
              Types of algorithms that can be used for comparing XML documents by XmlDiff. Auto means XmlDiff will
              automatically decide which algorithm to use for the particular case depending on the assumed number 
              of changes.
            </summary>
        </member>
        <member name="T:Microsoft.XmlDiffPatch.XmlDiff">
            <summary>
               Compares two documents or fragments. 
            </summary>
        </member>
        <member name="F:Microsoft.XmlDiffPatch.XmlDiff.NamespaceUri">
            <summary>
               XmlDiff namespace. The diffgram nodes belongs to this namespace.
            </summary>
        </member>
        <member name="M:Microsoft.XmlDiffPatch.XmlDiff.#ctor">
            <summary>
               Constructs XmlDiff object with default options.
            </summary>
        </member>
        <member name="M:Microsoft.XmlDiffPatch.XmlDiff.#ctor(Microsoft.XmlDiffPatch.XmlDiffOptions)">
            <summary>
               Constructs XmlDiff object with the given options. The values of XmlDiffOptions
               may be combined using the operator '|'.
            </summary>
        </member>
        <member name="M:Microsoft.XmlDiffPatch.XmlDiff.Compare(System.String,System.String,System.Boolean)">
            <summary>
               Compares two XML documents or fragments.
            </summary>
            <param name="sourceFile">The original xml document or fragment filename</param>
            <param name="changedFile">The changed xml document or fragment filename.</param>
            <param name="bFragments">If true, the passed files contain xml fragments; otherwise the files must contain xml documents.</param>
            <returns>True, if the documents/fragments are identical.</returns>
        </member>
        <member name="M:Microsoft.XmlDiffPatch.XmlDiff.ParseOptions(System.String)">
            <summary>
               Translates string representation of XmlDiff options into XmlDiffOptions enum.
            </summary>
            <param name="options">Value of the 'options' attribute of the 'xd:xmldiff' element in diffgram.</param>
        </member>
        <member name="M:Microsoft.XmlDiffPatch.XmlDiff.VerifySource(System.Xml.XmlNode,System.UInt64,Microsoft.XmlDiffPatch.XmlDiffOptions)">
            <summary>
               Given a diffgram, this method verifies whether the given document/node is the original
               source document/node for the diffgram. 
            </summary>
            <param name="node">Document/node to be verified.</param>
            <param name="hashValue">Value of the 'srcDocHash' attribute of the 'xd:xmldiff' element in diffgram.
            This is the hash value of the original source document. The document/node is verified if it yields
            the same hash value.</param>
            <param name="options">XmlDiff options selected when the document/node was compared. The hash value 
            of the document/node depends on these options.</param>
            <returns>True if the given document is the original source document for the diffgram.</returns>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreChildOrder">
            <summary>
               If true, the order of child nodes of each element will be ignored when comparing 
               the documents/fragments.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreComments">
            <summary>
               If true, all comments in the compared documents/fragments will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnorePI">
            <summary>
               If true, all processing instructions in the compared documents/fragments will be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreWhitespace">
            <summary>
               If true, all whitespace nodes in the compared documents/fragments will be ignored. Also, all
               text nodes and values of attributes will be normalized; whitespace sequences will be replaced
               by single space and beginning and trailing whitespaces will be trimmed.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreNamespaces">
            <summary>
               If true, the namespaces will be ignored when comparing the names of elements and attributes.
               This also mean that the prefixes will be ignored too as if the IgnorePrefixes option is true.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnorePrefixes">
            <summary>
               If true, the prefixes will be ignored when comparing the names of elements and attributes. 
               The namespaces will not ne ignored unless IgnoreNamespaces flag is true.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreXmlDecl">
            <summary>
               If true, the xml declarations will not be compared.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.IgnoreDtd">
            <summary>
               If true, the xml declarations will not be compared.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.Options">
            <summary>
               Options used when comparing xml documents/fragments.
            </summary>
        </member>
        <member name="P:Microsoft.XmlDiffPatch.XmlDiff.Algorithm">
            <summary>
               Algorithm that will be used for XML comparison.
            </summary>
        </member>
        <member name="T:Microsoft.XmlDiffPatch.XmlPatch">
            <summary>
               XML Patch modifies XML documents or nodes according to the XDL diffgram created by XML Diff.  
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.FileLogic.FilePathLogicCF">
            <summary>
            Help class to set up correct file paths for generated files (database exports, screen dumps)
            on the execution environment Windows CE.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.#ctor">
            <summary>
            Initializes a new instance of the RegionBuilder class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.ApplyRegion(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Applies a region to a window.
            </summary>
            <param name="windowHandle">The window handle which is the target of the region.</param>
            <param name="region">The region to be applied.</param>
            <param name="redraw">If the apply region should force a redraw immediately after the region has been applied.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.ApplyRegionFast(System.IntPtr,System.Drawing.Bitmap,System.Drawing.Color,System.Boolean)">
            <summary>
            Applies a region to a window from the shape of a bitmap.
            This method uses a faster algorithm, which does not support advanced shapes, e.g transparent colors in the middle of the bitmap.
            </summary>
            <param name="windowHandle">The window handle which is the target of the region.</param>
            <param name="bitmap">The bitmap to build the region from.</param>
            <param name="transparent">The color key of the transparent color.</param>
            <param name="redraw">If the apply region should force a redraw immediately after the region has been applied.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.ApplyRegion(System.IntPtr,System.Drawing.Bitmap,System.Drawing.Color,System.Boolean)">
            <summary>
            Applies a region to a window from the shape of a bitmap.
            </summary>
            <param name="windowHandle">The window handle which is the target of the region.</param>
            <param name="bitmap">The bitmap to build the region from.</param>
            <param name="transparent">The color key of the transparent color.</param>
            <param name="redraw">If the apply region should force a redraw immediately after the region has been applied.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.ApplyRegion(System.IntPtr,System.Collections.Generic.List{System.Drawing.Rectangle},System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Applies a region to a window from the information of the rectangles. The rectangles is the areas which will be removed from the main rectangle
            </summary>
            <param name="windowHandle">The window handle which is the target of the region.</param>
            <param name="rectangles">List of rectangles which represents the transparent area of the window</param>
            <param name="mainRectangle">The main rectangle which the transparent rectangles will be removed from when building the region</param>
            <param name="redraw">If the apply region should force a redraw immediately after the region has been applied.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.BuildRegionFromBitmap(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Creates a region from a bitmap.
            </summary>
            <param name="bitmap">The bitmap to use as a shape for the region</param>
            <param name="transparent">Color key for the transparent areas</param>
            <returns>The new region</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.BitmapRegionBuilder.BuildRegionFromBasicBitmap(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Creates a region from a bitmap. Does not work on advanced shapes but are a lot faster.
            </summary>
            <param name="bitmap">Bitmap to build region from</param>
            <param name="transparent">Color key of transparent color</param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.NineSliceBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the NineSliceBitmap class.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Graphics.NineSliceBitmap.AllMargins">
            <summary>
            Single margin on all four sides.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Graphics.RegionManager.m_RegionMatrix">
             Rounded corner matrix
             -------
             -----++
             ---++++
             --+++++
             -++++++
             -++++++
             -++++++
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.RegionManager.#ctor">
            <summary>
            Initializes a new instance of the RegionManager class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Graphics.RegionManager.CreateShadowDrawingRegion">
            <summary>
            Creates a shadow region, it's up to the caller to delete the object.
            </summary>
            <returns>Handle to region.</returns>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.DelayInput.DelayInputView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.DelayInput.DelayInputView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.DelayInput.DelayInputView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Keyboard.SendKeysCF">
            <summary>
            This class is partly borrowed from OpenNETCF and modified to make it work properly.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Data.DynamicBinding.ReadValue">
            <summary>
            Push data from source to destination
            Calling ReadValue on bindings not added in DCBC via base.AddCore will have some properties set to null, hence ReadValue will throw exception.
            This method will make the distinction and bypass ReadValue for bindings supporting optimized binding (i.e. pushing the data directly) 
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Dynamics.DynamicString.#ctor">
            <summary>
            Should only be used in runtime
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Dynamics.StringIntervalListCF">
            <summary>
            Inherit generic type, since XamlWriter cannot serialize generics.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MessageFilter.BeepMessageFilterCF.PreFilterMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Filters windows' messages, before being sent forth to potential event handlers.
            </summary>
            <param name="message">The incoming message.</param>
            <param name="lParam"></param>
            <param name="handle">The handle for the target window.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MessageFilter.MessageFilterCF.#ctor">
            <summary>
            Initializes a new instance of the MessageFilterCF class.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.MessageLibrary.MessageItem.DisplayName">
            <summary>
            Gets or sets the display name. In the property grid it will show as "Name".
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.MessageLibrary.MessageItem.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.MessageLibrary.MessageLibrary.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MessageLibrary.MessageLibrary.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MessageLibrary.MessageLibrary.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MultiLanguage.MultiLanguageSystemTextResourceManager.#ctor">
            <summary>
            Initializes a new instance of the MultiLanguageSystemTextResourceManager class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.MultiLanguage.MultiLanguageTextIDsFeature.#ctor">
            <summary>
            Run time-features should always be active!
            Default ctor is needed for xml-deserialization  
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedHelperCF.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Neo.ApplicationFramework.Common.NotifyPropertyChangedHelperCF"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedHelperCF.SetAndFirePropertyChanged``1(System.String,``0@,``0)">
            <summary>
            Sets the specified new value, and fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event if the new value is different from the old value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>true if value was changed; otherwise false.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.NotifyPropertyChangedHelperCF.SetAndFirePropertyChanged``1(System.String,``0@,``0,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Unhooks the event handler from the old value's <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            event, assigns the new value to it, hooks up the PropertyChanged event on the new value, and
            finally fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="valueChangedEventHandler">
            Event handler to hook up to the value's <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </param>
            <returns>true if value was changed; otherwise false.</returns>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Printer.Document.TableCell.ColSpan">
            <summary>
            Number of cells this cell spans over.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Printer.Document.TableCell.ClipToBoundsX">
            <summary>
            Determines if the cell content may 'escape' the bounds of the cell.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Printer.Document.TableColumn.SizeToAvailable">
            <summary>
            SizeToAvailable is a special value indicating that the table column should use
            all available space. If more than one column is set to SizeToAvailable the the 
            available space will be equally distributed among these columns.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Printer.Document.TableRow.AutoHeight">
            <summary>
            AutoHeight will tell the TableRow to use as much space vertically as is
            needed by the table rows content.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.BitmapPrintImageToGdiConverter">
            <summary>
            Converts a bitmap image into a device context that
            can be used with native Gdi methods.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.BlockCollectionLayout">
            <summary>
            BlockCollectionLayout performs layout of all child layout elements. Layout elements
            are always stacked on top of each other much like how a StackPanel works in WPF when
            it has its Orientation set to vertical.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.BlockLayoutElement">
            <summary>
            BlockLayoutElement is a base for layout elements that wish to provide padding
            to the contained content.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.DeviceDependentThickness">
            <summary>
            Represents a thickness on the four sides of a rectangle. In contrast to the Thickness class
            these values are calculated based on the resolution of the device and units are in pixels.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.BlockLayoutFactory">
            <summary>
            Factory for converting a FlowDocument Block into the corresponding layout element.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.FlowDocumentLayout">
            <summary>
            FlowDocumentLayout performs layout of FlowDocument. The layout is adapted to the 
            available space which is dependent on the (printer)device is used. FlowDocumentLayout
            will construct a tree of sub-layout elements all in charge of performing layout
            on a subset of the original flow document.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.ImageLayout">
            <summary>
            Performs layout of a FlowDocument PrintImage. 
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.InlineCollectionLayout">
            <summary>
            Performs layout of a list of inlines (e.g. texts/spans). Unlike blocks inlines continue on the same row until the
            end is reached. Dependening on the TextWrapping the inlines may continue on the next row (TextWrapping.Wrap) or
            the inline may be chopped (TextWrapping.NoWrap). 
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.InlineLayout">
            <summary>
            Performs layout on a FlowDocument Inline. Currently this class is hardcoded to 
            layout Spans (which is a inline element).  
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.NullPrintImageToGdiConverter">
            <summary>
            A null converter to convert a GdiImage (i.e. a device context) to DeviceContext.
            Since GdiImage already provide a device context no conversion is needed, hence
            the null prefix.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.ParagraphLayout">
            <summary>
            Performs layout of a FlowDocument Paragraph. A paragraph consists
            of a number of inline elements, typically spans.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Printer.GdiPrinter.TableLayout">
            <summary>
            Performs layout of a FlowDocument Table. TableLayout arranges the content in
            a grid.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.SetWinFormsThreadExceptionMode">
            <summary>
            By setting SetUnhandledExceptionMode on full framework to ThrowException (1) it behaves the same on both real Compact Framework and on full Framework.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.GetObject``1(System.Type,System.String)">
            <summary>
            Returns an existing instance of instanceType or creates a new instance of it.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.GetObjects``1">
            <summary>
            Finds all objects of specified type or inherited from that type.
            </summary>
            <typeparam name="T">Type of objects to search for.</typeparam>
            <returns>All objects of the specified type or inherited from the type.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.GetInstances``1">
            <summary>
            Finds all objects of specified type (or those assignable from) that were designer-generated.
            (e.g. AlarmServer, SecurityManager)
            </summary>
            <returns>Iterator over found instances of matching type.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.GetControlFromHandle(System.IntPtr,System.Windows.Forms.Control@,System.Windows.Forms.Control@)">
            <summary>
            Searches for a control with the specifed handle, among all forms.
            </summary>
            <param name="handle">The control handle to search for.</param>
            <param name="targetControl">The control with the specifed handle, or null if not found.</param>
            <param name="targetRoot">The topmost parent control.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.FindControl(System.IntPtr,System.Windows.Forms.Control.ControlCollection)">
            <summary>
            Recursive search function among all controls.
            </summary>
            <param name="hwnd">The control handle to search for.</param>
            <param name="controls">The controls collection to search in.</param>
            <returns>The control with the specifed handle, or null if not found.</returns>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.Neo#ApplicationFramework#Interfaces#ISettings#ProjectSettings">
            <summary>
            Implemented explicitly in order to not collide with a designer having the same name.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Runtime.GlobalsBase.Neo#ApplicationFramework#Interfaces#ISettings#SystemSettings">
            <summary>
            Implemented explicitly in order to not collide with a designer having the same name.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Security.FeatureApi.RegistrySecuredFeature">
            <summary>
            A register secured feature is not especially secured, however it is the first/presently the only feature to be protected by any kind of secret.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Runtime.MultipleVncConnectionFeature.#ctor">
            <summary>
            Run time-features should always be active!
            Default ctor is needed for xml-deserialization  
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Security.FeatureApi.FeatureSecurityToolXmFileReader.AccessableFeatures">
            <summary>
            The features that the user has access to
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF">
            <summary>
            The security extender holding certain security related properties, in runtime.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.m_SecurityGroups">
            <summary>
            Hash table with controls and their security groups.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.m_VisibilityModes">
            <summary>
            Hash table with controls and their visibility modes.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SecurityExtenderCF"/> class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.GetSecurityGroupsForControl(System.ComponentModel.IComponent)">
            <summary>
            Gets the security groups enumeration for a component.
            </summary>
            <param name="component">The component to retrieve security groups for.</param>
            <returns>A security groups enumeration.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.SetSecurityGroupsRequired(System.ComponentModel.IComponent,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Sets the security groups for a component.
            </summary>
            <param name="component">The component to set security groups for.</param>
            <param name="value">A security groups enumeration.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.GetVisibilityModeForControl(System.ComponentModel.IComponent)">
            <summary>
            Gets the visibility mode for a component.
            </summary>
            <param name="component">The component to retrieve the visibility mode for.</param>
            <returns>A visibility mode enumeration.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.SetVisibilityOnAccessDenied(System.ComponentModel.IComponent,Neo.ApplicationFramework.Interfaces.VisibilityModes)">
            <summary>
            Sets the visibility mode for a component.
            </summary>
            <param name="component">The component to set the visibility mode for.</param>
            <param name="value">A visibility mode enumeration.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.RegisterSecurityExtender(System.ComponentModel.Component,Neo.ApplicationFramework.Interfaces.ISecurityExtenderCF)">
            <summary>
            Adds the security extender to the security manager's collection of extenders.
            </summary>
            <param name="component">The parent control of the extender.</param>
            <param name="securityExtender">The security extender to add.</param>
            <returns>True if successfully added, false otherwise.</returns>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Security.SecurityExtenderCF.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroupHelper.FlagGroup(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Flags a security group, by using bitwise 'or' on the enumeration and the group.
            </summary>
            <param name="groups">Security groups enumeration to manipulate.</param>
            <param name="groupToFlag">Group to flag in enumeration.</param>
            <returns>A security groups enumeration with the specified group flagged.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroupHelper.UnflagGroup(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Unflags a security group, by using bitwise 'and' on the enumeration and the inverted group.
            </summary>
            <param name="groups">Security groups enumeration to manipulate.</param>
            <param name="groupToUnflag">Group to unflag in enumeration.</param>
            <returns>A security groups enumeration with the specified group unflagged.</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityGroupHelper.IsAnyGroupFlagged(Neo.ApplicationFramework.Interfaces.SecurityGroups,Neo.ApplicationFramework.Interfaces.SecurityGroups)">
            <summary>
            Checks if any group is flagged in another security groups enumeration.
            </summary>
            <param name="groups">Security groups enumeration to check among.</param>
            <param name="groupsToCheck">Groups to check if flagged.</param>
            <returns>True if any of the groups is flagged, false otherwise.</returns>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Security.SecurityMessageFilterCF">
            <summary>
            Security message filter for compact framework, e.g. Windows CE.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Security.SecurityMessageFilterCF.PreFilterMessage(System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Filters windows' messages, before being sent forth to potential event handlers.
            </summary>
            <param name="message">The incoming message.</param>
            <param name="key">The key that was pressed.</param>
            <param name="handle">The handle for the target window.</param>
            <param name="param">The handle for the incoming parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Serialization.ObjectSerializerCF.ReadObject(System.Xml.XmlNode,System.Object)">
            Reads the "Object" tag. This returns an instance of the
            newly created object. Returns null if there was an error.
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Service.ServiceContainerCF.GetServiceSafe``1">
            <summary>
            Doesn't throw an exception
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Service.ServiceContainerCF.GetService``1">
            <summary>
            Gets a specific service
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:Neo.ApplicationFramework.Common.Exceptions.ServiceNotAvailableException"></exception>
            <returns>Found service</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Service.ServiceContainerCF.IsServicePresent(System.Type)">
            <summary>
            Functionality added to default implementation of servicecontainer.
            This method should maybe check the parent container as well?
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Service.ServiceContainerCF.IsServiceMissing(System.Type)">
            <summary>
            Functionality added to default implementation of servicecontainer.
            This method should maybe check the parent container as well?
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.RegisterServiceLazy``1(System.Func{``0})">
            <summary>
            Register a service without supplying a created instance. Instead you supply a delegate
            that will be called the first time it is requested, in order to create the concrete
            service instance.
            </summary>
            <typeparam name="T">
            The service interface to be registered with the ServiceContainer. This is what
            consumers of the service will supply to the GetService call on the ServiceContainer.
            </typeparam>
            <param name="serviceProvider">
            A delegate that will be called the first time the service is requested. It is expected
            to return a concrete instance of the service.
            </param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.IsServiceResolved``1">
            <summary>
            Differs from, IsServicePresent, in that it is aware of lazy registered services
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.GetServiceSafe``1">
            <summary>
            Doesn't throw an exception
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.RegisterServices">
            <summary>
            All services provided by the tool should be registered here.
            Register services is called first for every tool, before any of them are being initialized.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.Init">
            <summary>
            Initializes the tool, all services should now have been registered, but the message pump is not up.
            It's now possible to connect to other services, since they should all have been registered.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.Run">
            <summary>
            Runs the tool, i.e. called as a consequence of Application.Idle being fired, the message pump is now up.
            It's guaranteed that every tool has been initialized before run is called.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.Stop">
            <summary>
            Stops the tool.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.ToolBase.IsInitialized">
            <summary>
            Determines whether this instance is initialized or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGBtoHSL(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB to HSL.
            </summary>
            <param name="red">Red value, must be in [0,255].</param>
            <param name="green">Green value, must be in [0,255].</param>
            <param name="blue">Blue value, must be in [0,255].</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.HSLtoRGB(System.Double,System.Double,System.Double)">
            <summary>
            Converts HSL to RGB.
            </summary>
            <param name="h">Hue, must be in [0, 360].</param>
            <param name="s">Saturation, must be in [0, 1].</param>
            <param name="l">Luminance, must be in [0, 1].</param>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGB">
            <summary>
            RGB structure.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGB.Empty">
            <summary>
            Gets an empty RGB structure;
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGB.Red">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGB.Green">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.ColorSpaceConverter.RGB.Blue">
            <summary>
            Gets or sets red value.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.TypeConverters.HSL">
            <summary>
            Structure to define HSL.
            </summary>
        </member>
        <member name="F:Neo.ApplicationFramework.Common.TypeConverters.HSL.Empty">
            <summary>
            Gets an empty HSL structure;
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.TypeConverters.HSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of a HSL structure.
            </summary>
            <param name="h">Hue value.</param>
            <param name="s">Saturation value.</param>
            <param name="l">Lightness value.</param>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.HSL.Hue">
            <summary>
            Gets or sets the hue component.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.HSL.Saturation">
            <summary>
            Gets or sets saturation component.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.TypeConverters.HSL.Luminance">
            <summary>
            Gets or sets the luminance component.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.ApplicationCE.ThreadWindows.Enable(System.Boolean)">
            <summary>
            Enables/Disables thread windows except parent window.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.FileHelperCF.WriteStreamToTemp(System.IO.Stream,System.String)">
            <summary>
            Writes the stream to the system temp directory and returns the new filename.
            </summary>
            <param name="stream">Stream to write</param>
            <param name="fileName">Filename to extract extension from. Can be null.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.InvokerControl.#ctor">
            <summary>
            Initializes a new instance of the InvokerControl class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.LocalizationHelperCF.GetFunctionDisplayNameFromType(System.Type)">
            <summary>
            Gets the FunctionDisplayName from type of a DesignerItem.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.LocalizationHelperCF.GetDesignerGroupFromType(System.Type)">
            <summary>
            Gets the DesignerGroup from type of a DesignerItem.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Utilities.NeoApplication">
            <summary>
            This class is a CF wrapper for the .NET Application class.
            It executes methods in different assemblies, depending on 
            the execution environment.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.NeoApplication.Initialize">
            <summary>
            This method must be invoked on the main thread since the InvokerControl must be created on 
            the window thread.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.NeoApplication.Run(System.Type)">
            <summary>
            Begins running a standard application message loop on 
            the current thread, and makes the specified form visible.
            </summary>
            <param name="screenType">A screen type to make visible.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.NeoApplication.AddMessageFilter(OpenNETCF.Windows.Forms.IMessageFilter)">
            <summary>
            Adds a message filter to monitor Windows messages 
            as they are routed to their destinations.
            </summary>
            <param name="messageFilter">The implementation of the IMessageFilter interface you want to install.</param>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.NeoApplication.StartupPath">
            <summary>
            Gets the path for the executable file that started 
            the application, not including the executable name. 
            </summary>
            <returns>The startup path for the application.</returns>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Utilities.NonReentrantActionExecutor">
            <summary>
            This class is usefull in conjunction with timers. 
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.NonReentrantActionExecutor.Invoke">
            <summary>
            If several threads are invoking this method, only one will execute the action provided in the constructor.
            </summary>
            <returns>true if the action is executed, false if not</returns>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.NotificationLogic.UpdateNotificationMessage(System.String,System.Int32)">
            <summary>
            This function will show the notification message for at least timeoutInSeconds. 
            If HideNotification is called after the time has elapsed this will be the actual 
            time the message is shown. 
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.Send(System.String)">
            <summary>
            Send message through UDP.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.CompactHeaps">
            <summary>
            Tries to compact all heaps an free memory.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.UDPRecieve">
            <summary>
            True if ProcessExplorer should monitor the UPDRecievePortNumber
            for incoming commands.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.UDPRecievePortNumber">
            <summary>
            The UPD port number to monitor for incoming commands.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.RemoteEndPoint">
            <summary>
            The UPD address to use.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.TCPAddress">
            <summary>
            TCP address. Not used.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.TCPPortNumber">
            <summary>
            TCP portnumber. Not used.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.Silent">
            <summary>
            If true, nothing will be sent.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.WaitForAttachDebugger">
            <summary>
            If true, makes Neo wait in Main, so a debugger can be attached 
            to a process. Setting it to false will make Neo continue excecuting.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.BoolDebug1">
            <summary>
            Boolean debug variable.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.BoolDebug2">
            <summary>
            Boolean debug variable.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.BoolDebug3">
            <summary>
            Boolean debug variable.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.ProcessList">
            <summary>
            List of all running processes.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessExplorer.SystemInfo">
            <summary>
            GlobalMemoryStatus.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.ProcessID">
            <summary>
            Identifier of the process. 
            The contents of this member can be used by Win32 API elements.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.Usage">
            <summary>
            Number of references to the process. Must be 1.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.ProcessExe">
            <summary>
            The path and file name of the executable file for the process.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.DefaultHeapID">
            <summary>
            Identifier of the default heap for the process. 
            The contents of this member has meaning only to the tool help functions. 
            It is not a handle, nor is it usable by Win32 API elements.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.ModuleID">
            <summary>
            Module identifier of the process. Must be 0.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.ThreadCount">
            <summary>
            Number of execution threads started by the process.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.ParentProcessID">
            <summary>
            Identifier of the process that created the process being examined. 
            Must be 0.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.PriClassBase">
            <summary>
            Base priority of any threads created by this process. 
            Value is always THREAD_PRIORITY_NORMAL
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.Flags">
            <summary>
            Reserved; do not use.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.WindowText">
            <summary>
            The text of the owner window, if any.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.Threads">
            <summary>
            List of execution threads started by the process.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.Modules">
            <summary>
            List of modules that the process is owner of.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.Heaps">
            <summary>
            A list of heaps the process owns
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.ProcessInfo.MemoryUsage">
            <summary>
            The MemoryUsage of the process.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Stopwatch.StartClock(System.String)">
            <summary>
            This method starts a clock with a given name. Every call to StartClock/StopClock accumulates the time taken which can later be displayed by SummarizeClock().
            </summary>
            <param name="clockName"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Stopwatch.StopClock(System.String,System.Boolean)">
            <summary>
            Stops this clock and displays the time taken since last StartClock.
            </summary>
            <param name="clockName"></param>
            <param name="quiet">False will not display the time taken for this clock.</param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Stopwatch.SummarizeClock(System.String)">
            <summary>
            This method has no effect on the clock. It just displays the time accumulated by one or several calls to StartClock/StopClock.
            </summary>
            <param name="clockName"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Stopwatch.SummarizeClock(System.String,System.Boolean)">
            <summary>
            This method displays the time accumulated by one or several calls to StartClock/StopClock and resets the time.
            </summary>
            <param name="clockName"></param>
            <param name="reset"></param>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Stopwatch.ResetClock(System.String)">
            <summary>
            Resets a given clock.
            </summary>
            <param name="clockName"></param>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.Stopwatch.Silent">
            <summary>
            Makes the clock run in silent mode.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.StopWatchCF.ElapsedMicroSeconds">
            <summary>
            Returns the number of elapsed micro seconds, by looking at the OSCR0 register.
            </summary>
        </member>
        <member name="P:Neo.ApplicationFramework.Common.Utilities.StopWatchCF.ShowProjectStartupTime">
            <summary>
            This is the time between the projects Main, to the first paint of the main window.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.SystemInfo.#ctor">
            <summary>
            Initializes a new instance of the SystemInfo class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Threading.Task.Execute">
            <summary>
            Do not call this method directly. It should be called by the task scheduler.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Utilities.Threading.ITaskBuilder">
            <summary>
            Helper class to create "fake" tasks using the TaskCompletionSource. Fake tasks
            is useful in tests when you want to mock results but also to connect convert 
            asyncrounous operations that are event based to tasks.
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Utilities.Threading.TaskCompletionSource">
            <summary>
            TaskCompletionSource gives you the ability of controlling a Task, ie, set
            the outcome manually. 
            </summary>
        </member>
        <member name="T:Neo.ApplicationFramework.Common.Utilities.Threading.TaskExtensions">
            <summary>
            Extension methods on Task
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Threading.TaskExtensions.Unwrap(Neo.ApplicationFramework.Interfaces.ITask{Neo.ApplicationFramework.Interfaces.ITask})">
            <summary>
            Creates a proxy Task that represents the asynchronous operation of a Task of task.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Threading.ThreadPoolTaskScheduler.StartNextTaskInQueue">
            <summary>
            Must be called while holding m_QueueSync lock.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Toolhelp32.ProcessEntry32.#ctor">
            <summary>
            Initializes a new instance of the PROCESSENTRY32 class.
            </summary>
        </member>
        <member name="M:Neo.ApplicationFramework.Common.Utilities.Toolhelp32.ModuleEntry32.#ctor">
            <summary>
            Initializes a new instance of the ModuleEntry32 class.
            </summary>
        </member>
    </members>
</doc>
